   // MARK: - Patch

    /// You can patch some data providing default values.
    ///
    /// - Parameters:
    ///   - data: the Data to patch
    ///   - patchDictionary: the dictionary with the default key / value. E.G: ["firtsName":"", "lastName":"","age":0]
    /// - Returns: the patched data
    open func patchProperties(data:Data,patchDictionary:[String:Any])throws->Data{
        if var jsonDictionary = try JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.allowFragments) as? [String:Any]{
            let isACollection = jsonDictionary.keys.contains("_storage") && jsonDictionary.keys.contains("_staged") &&  jsonDictionary.keys.contains("_deleted")
            if isACollection {
                if var items = jsonDictionary["_storage"] as? [String:[String:Any]]{
                    for (UID,_) in items{
                        for (key,value) in patchDictionary{
                            if !items[UID]!.keys.contains(key){
                                items[UID]![key] = value
                            }
                        }
                    }
                    jsonDictionary["_storage"]=items
                }
            }else{
                for (key,value) in patchDictionary{
                    if !jsonDictionary.keys.contains(key){
                        jsonDictionary[key] = value
                    }
                }
            }
            do{
                let r = try JSONSerialization.data(withJSONObject: jsonDictionary, options: [])
                return r
            }catch{
                print("\(#file) \(#line) Error while patching: \(patchDictionary)")
                throw error
            }
        }
        throw DynamicsError.jsonDeserializationFailure
    }

    /// You can patch some data providing a dictionary template.
    ///
    /// - Parameters:
    ///   - data:  the Data to patch
    ///   - injectedDictionary: the string to be injected
    ///   - keyPath: the insertion point
    /// - Returns: the patched data
    open func patchItemsInCollection(data:Data,injectedDictionary:[String:Any],keyPath:DictionaryKeyPath)throws->Data{
        if var jsonDictionary = try JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.allowFragments) as? [String:Any]{
            let isACollection = jsonDictionary.keys.contains("_storage") && jsonDictionary.keys.contains("_staged") &&  jsonDictionary.keys.contains("_deleted")
            if isACollection {
                if var items = jsonDictionary["_storage"] as? [String:[String:Any]]{
                    for (UID,_) in items{
                        // We use a rare dynamic approach.
                        // Check `Bartleby.xOS/Core/DictionaryKetPath.swift` for details.
                        if items[UID]![keyPath:keyPath] == nil{
                            items[UID]![keyPath:keyPath] = injectedDictionary
                        }
                    }
                    jsonDictionary["_storage"]=items
                }
            }else{
                throw DynamicsError.collectionTypeRequired
            }
            do{
                let r = try JSONSerialization.data(withJSONObject: jsonDictionary, options: [])
                return r
            }catch{
                print("\(#file) \(#line) Error while injecting: @\(keyPath.path) \n \(injectedDictionary)")
                throw error
            }
        }
        throw DynamicsError.jsonDeserializationFailure
    }


    /// Change the property name
    ///
    /// - Parameters:
    ///   - data: the Data to patch
    ///   - oldName: the old property name (you can use KeyPaths)
    ///   - newName: the new property name
    /// - Returns: the patched data
    open func changeItemsPropertyName(data:Data,oldName:String,newName:String)throws->Data{
        if var jsonDictionary = try JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.allowFragments) as? [String:Any]{
            let isACollection = jsonDictionary.keys.contains("_storage") && jsonDictionary.keys.contains("_staged") &&  jsonDictionary.keys.contains("_deleted")
            if isACollection {
                var components = oldName.components(separatedBy: ".")
                components.removeLast()
                components.append(newName)
                let newNameKeyPath = DictionaryKeyPath(components.joined(separator: "."))
                let oldKeyPath = DictionaryKeyPath(oldName)
                if var items = jsonDictionary["_storage"] as? [String:[String:Any]]{
                    for (UID,_) in items{
                        // We use a rare dynamic approach.
                        // Check `Bartleby.xOS/Core/DictionaryKetPath.swift` for details.
                        if items[UID]![keyPath:oldKeyPath] != nil{
                            items[UID]![keyPath:newNameKeyPath] = items[UID]![keyPath:oldKeyPath]
                            items[UID]![keyPath:oldKeyPath] = nil
                        }
                    }
                    jsonDictionary["_storage"]=items
                }

            }else{
                throw DynamicsError.collectionTypeRequired
            }
            do{
                let r = try JSONSerialization.data(withJSONObject: jsonDictionary, options: [])
                return r
            }catch{
                print("\(#file) \(#line) Error while changing propertyName: \(oldName) -> \(newName)")
                throw error
            }
        }
        throw DynamicsError.jsonDeserializationFailure
    }