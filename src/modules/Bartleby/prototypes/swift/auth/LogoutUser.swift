//  Bartleby
//
//  Generated by Flexions for benoit@pereira-da-silva.com
//  https://github.com/benoit-pereira-da-silva/Flexions
//
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
// IF NECESSARY YOU CAN MARK THIS FILE TO BE PRESERVED
// IN THE PREPROCESSOR BY ADDING IN Hypotypose::instance().preservePath
//

import Foundation
import Alamofire
import ObjectMapper

@objc(LogoutUser) class LogoutUser : JObject{

    static func execute(dID:String,
						sucessHandler success:()->(),
						failureHandler failure:(context:JHTTPResponse)->()){

				    let pathURL=Configuration.baseUrl.URLByAppendingPathComponent("/user/logout")
				    let dictionary:Dictionary<String, AnyObject>=[:]
				    let urlRequest=HTTPManager.mutableRequestWithToken(domainID:dID,withActionName:"LogoutUser" ,forMethod:Method.POST, and: pathURL)
				    let r:Request=request(ParameterEncoding.JSON.encode(urlRequest, parameters: dictionary).0)
				    r.responseString{ response in
                        let request=response.request
                        let result=response.result
                        let response=response.response

                        // Bartleby consignation

                        let context = JHTTPResponse( code: 100,
                            caller: "LogoutUser.execute",
                            relatedURL:request?.URL,
                            httpStatusCode: response?.statusCode ?? 0,
                            response: response )

                        // React according to the situation
                        var reactions = Array<Bartleby.Reaction> ()
                        reactions.append(Bartleby.Reaction.Track(result: nil, context: context)) // Tracking

                        if result.isFailure {
                            let failureReaction =  Bartleby.Reaction.DispatchAdaptiveMessage(
                                context: context,
                                title: NSLocalizedString("Unsuccessfull attempt",
                                    comment: "Unsuccessfull attempt"),
                                body: NSLocalizedString("authentication logout",
                                    comment: "authentication logout failure description"),
                                trigger:{ (selectedIndex) -> () in
                                    print("Post presentation message selectedIndex:\(selectedIndex)")
                            })
                            reactions.append(failureReaction)
                            failure(context:context)
                        }else{
                            if let statusCode=response?.statusCode {
                                if 200...299 ~= statusCode {
                                    success()
                                }else{
                                    // Bartlby does not currenlty discriminate status codes 100 & 101
                                    // and treats any status code >= 300 the same way
                                    // because we consider that failures differentiations could be done by the caller.
                                    let failureReaction =  Bartleby.Reaction.DispatchAdaptiveMessage(
                                        context: context,
                                        title: NSLocalizedString("Unsuccessfull attempt",
                                            comment: "Unsuccessfull attempt"),
                                        body: NSLocalizedString("termination of session",
                                            comment: "termination of session failure description"),
                                        trigger:{ (selectedIndex) -> () in
                                            print("Post presentation message selectedIndex:\(selectedIndex)")
                                    })
                                    reactions.append(failureReaction)
                                    failure(context:context)
                                }
                            }
                        }
                        //Let's react according to the context.
                        Bartleby.sharedInstance.perform(reactions, forContext: context)
                    }
				}

}
