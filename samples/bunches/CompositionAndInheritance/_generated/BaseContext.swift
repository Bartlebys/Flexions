//
//  BaseContext.swift
//  Samples
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for Benoit Pereira da Silva https://pereira-da-silva.com/contact
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  Bartleby's https://bartlebys.org   All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
import Alamofire
import ObjectMapper
import BartlebyKit
#endif

// MARK: Base object
@objc(BaseContext) open class BaseContext : JObject{

    // Universal type support
    override open class func typeName() -> String {
        return "BaseContext"
    }


	//You can give a name
	dynamic open var name:String = "\(Default.NO_NAME)"{	 
	    didSet { 
	       if name != oldValue {
	            self.provisionChanges(forKey: "name",oldValue: oldValue,newValue: name) 
	       } 
	    }
	}


	//You can setup an informative string
	dynamic open var informativeString:String? {	 
	    didSet { 
	       if informativeString != oldValue {
	            self.provisionChanges(forKey: "informativeString",oldValue: oldValue,newValue: informativeString) 
	       } 
	    }
	}


	//Some notes associated with the context
	dynamic open var notes:String = ""{	 
	    didSet { 
	       if notes != oldValue {
	            self.provisionChanges(forKey: "notes",oldValue: oldValue,newValue: notes) 
	       } 
	    }
	}


	//The creation date
	dynamic open var creationDate:Date = Date()  {	 
	    didSet { 
	       if creationDate != oldValue {
	            self.provisionChanges(forKey: "creationDate",oldValue: oldValue,newValue: creationDate)  
	       } 
	    }
	}


	//Associated tags (external references)
	dynamic open var tags:[ExternalReference] = [ExternalReference]()  {	 
	    didSet { 
	       if tags != oldValue {
	            self.provisionChanges(forKey: "tags",oldValue: oldValue,newValue: tags)  
	       } 
	    }
	}


    // MARK: - Exposed (Bartleby's KVC like generative implementation)

    /// Return all the exposed instance variables keys. (Exposed == public and modifiable).
    override open var exposedKeys:[String] {
        var exposed=super.exposedKeys
        exposed.append(contentsOf:["name","informativeString","notes","creationDate","tags"])
        return exposed
    }


    /// Set the value of the given key
    ///
    /// - parameter value: the value
    /// - parameter key:   the key
    ///
    /// - throws: throws JObjectExpositionError when the key is not exposed
    override open func setExposedValue(_ value:Any?, forKey key: String) throws {
        switch key {

            case "name":
                if let casted=value as? String{
                    self.name=casted
                }
            case "informativeString":
                if let casted=value as? String{
                    self.informativeString=casted
                }
            case "notes":
                if let casted=value as? String{
                    self.notes=casted
                }
            case "creationDate":
                if let casted=value as? Date{
                    self.creationDate=casted
                }
            case "tags":
                if let casted=value as? [ExternalReference]{
                    self.tags=casted
                }
            default:
                try super.setExposedValue(value, forKey: key)
        }
    }


    /// Returns the value of an exposed key.
    ///
    /// - parameter key: the key
    ///
    /// - throws: throws JObjectExpositionError when the key is not exposed
    ///
    /// - returns: returns the value
    override open func getExposedValueForKey(_ key:String) throws -> Any?{
        switch key {

            case "name":
               return self.name
            case "informativeString":
               return self.informativeString
            case "notes":
               return self.notes
            case "creationDate":
               return self.creationDate
            case "tags":
               return self.tags
            default:
                return try super.getExposedValueForKey(key)
        }
    }
    // MARK: - Mappable

    required public init?(map: Map) {
        super.init(map:map)
    }

    override open func mapping(map: Map) {
        super.mapping(map: map)
        self.silentGroupedChanges {
			self.name <- ( map["name"] )
			self.informativeString <- ( map["informativeString"] )
			self.notes <- ( map["notes"] )
			self.creationDate <- ( map["creationDate"], ISO8601DateTransform() )
			self.tags <- ( map["tags"] )
        }
    }


    // MARK: - NSSecureCoding

    required public init?(coder decoder: NSCoder) {
        super.init(coder: decoder)
        self.silentGroupedChanges {
			self.name=String(describing: decoder.decodeObject(of: NSString.self, forKey: "name")! as NSString)
			self.informativeString=String(describing: decoder.decodeObject(of: NSString.self, forKey:"informativeString") as NSString?)
			self.notes=String(describing: decoder.decodeObject(of: NSString.self, forKey: "notes")! as NSString)
			self.creationDate=decoder.decodeObject(of: NSDate.self , forKey: "creationDate")! as Date
			self.tags=decoder.decodeObject(of: [NSArray.classForCoder(),ExternalReference.classForCoder()], forKey: "tags")! as! [ExternalReference]
        }
    }

    override open func encode(with coder: NSCoder) {
        super.encode(with:coder)
		coder.encode(self.name,forKey:"name")
		if let informativeString = self.informativeString {
			coder.encode(informativeString,forKey:"informativeString")
		}
		coder.encode(self.notes,forKey:"notes")
		coder.encode(self.creationDate,forKey:"creationDate")
		coder.encode(self.tags,forKey:"tags")
    }

    override open class var supportsSecureCoding:Bool{
        return true
    }


    required public init() {
        super.init()
    }

    // MARK: Identifiable

    override open class var collectionName:String{
        return "baseContexts"
    }

    override open var d_collectionName:String{
        return BaseContext.collectionName
    }


}

