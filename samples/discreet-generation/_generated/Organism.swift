//
//  Organism.swift
//  DiscreetTest
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for bpds
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  Chaosmos  All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
	import Alamofire
	import BartlebyKit
#endif

// MARK: An Organism
@objc(Organism) open class Organism : NSObject, Codable{

    // Universal type support
    override open class func typeName() -> String {
        return "Organism"
    }

	//The phylum
	dynamic open var requiredWithoutDefault:String = "‎chordata"

	//The biological domain
	public enum Domain:String{
		case bacteria = "bacteria"
		case archaea = "archaea"
		case eukaryota = "eukaryota"
	}
	open var domain:Domain = Domain.bacteria  {
	    didSet { 
	       if !self.wantsQuietChanges && domain != oldValue {
	            self.provisionChanges(forKey: "domain",oldValue: oldValue.rawValue,newValue: domain.rawValue)  
	       } 
	    }
	}

	//The kingdom
	open var kingdom:String = "‎animalia"

	//The phylum
	dynamic open var phylum‎:String = "‎chordata"{
	    didSet { 
	       if !self.wantsQuietChanges && phylum‎ != oldValue {
	            self.provisionChanges(forKey: "phylum‎",oldValue: oldValue,newValue: phylum‎) 
	       } 
	    }
	}

	//The class
	dynamic open var class:OrganismClass = OrganismClass("mammalia")

	//The Order‎
	dynamic open let order‎:String?

	//The family of the Organism
	dynamic open var family:String?

	//The Genus
	dynamic open var genus:String?

	//The species 
	dynamic open var species:String?

	//Is the organism currently extincted 
	dynamic open var extincted:Bool?

	//Age of the organism 
	dynamic open var age:Int = 0

	//Birthday
	dynamic open var birthdayAsDate:Date? {
	    didSet { 
	       if !self.wantsQuietChanges && birthdayAsDate != oldValue {
	            self.provisionChanges(forKey: "birthdayAsDate",oldValue: oldValue,newValue: birthdayAsDate) 
	       } 
	    }
	}


    // MARK: - Codable


    enum CodingKeys: String, CodingKey {
		case requiredWithoutDefault
		case domain
		case kingdom
		case phylum‎
		case class
		case order‎
		case family
		case genus
		case species
		case extincted
		case age
		case birthdayAsDate
    }

    required public init(from decoder: Decoder) throws{
super.init(from: decoder)
    self.quietChanges {
			self.requiredWithoutDefault=String(describing: decoder.decodeObject(of: NSString.self, forKey: "requiredWithoutDefault")! as NSString)
			self.domain=Organism.Domain(rawValue:String(describing: decoder.decodeObject(of: NSString.self, forKey: "domain")! as NSString))! 
			self.kingdom=String(describing: decoder.decodeObject(of: NSString.self, forKey: "kingdom")! as NSString)
			self.phylum‎=String(describing: decoder.decodeObject(of: NSString.self, forKey: "phylum‎")! as NSString)
			self.class=decoder.decodeObject(of:OrganismClass.self, forKey: "class")! 
			self.order‎=String(describing: decoder.decodeObject(of: NSString.self, forKey:"order‎") as NSString?)
			self.family=String(describing: decoder.decodeObject(of: NSString.self, forKey:"family") as NSString?)
			self.genus=String(describing: decoder.decodeObject(of: NSString.self, forKey:"genus") as NSString?)
			self.species=String(describing: decoder.decodeObject(of: NSString.self, forKey:"species") as NSString?)
			self.extincted=decoder.decodeBool(forKey:"extincted") 
			self.age=decoder.decodeInteger(forKey:"age") 
			self.birthdayAsDate=decoder.decodeObject(of: NSDate.self , forKey:"birthdayAsDate") as Date?
    }
    }

override open func encode(to encoder: Encoder) throws {
super.encode(to:coder)
		coder.encode(self.requiredWithoutDefault,forKey:"requiredWithoutDefault")
		coder.encode(self.domain.rawValue ,forKey:"domain")
		coder.encode(self.kingdom,forKey:"kingdom")
		coder.encode(self.phylum‎,forKey:"phylum‎")
		coder.encode(self.class,forKey:"class")
		if let order‎ = self.order‎ {
			coder.encode(order‎,forKey:"order‎")
		}
		if let family = self.family {
			coder.encode(family,forKey:"family")
		}
		if let genus = self.genus {
			coder.encode(genus,forKey:"genus")
		}
		if let species = self.species {
			coder.encode(species,forKey:"species")
		}
		if let extincted = self.extincted {
			coder.encode(extincted,forKey:"extincted")
		}
		coder.encode(self.age,forKey:"age")
		if let birthdayAsDate = self.birthdayAsDate {
			coder.encode(birthdayAsDate,forKey:"birthdayAsDate")
		}


    // MARK: - Initializable
    required public init() {
        super.init()
    }

    // MARK: - UniversalType
    override open class var collectionName:String{
        return "organisms"
    }

    override open var d_collectionName:String{
        return Organism.collectionName
    }
}